// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-webhook-go-sdk/models"
)

// AddWebhookReader is a Reader for the AddWebhook structure.
type AddWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddWebhookCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddWebhookCreated creates a AddWebhookCreated with default headers values
func NewAddWebhookCreated() *AddWebhookCreated {
	return &AddWebhookCreated{}
}

/*
AddWebhookCreated describes a response with status code 201, with default header values.

Successfully added
*/
type AddWebhookCreated struct {
	Payload *models.WebhookInfo
}

// IsSuccess returns true when this add webhook created response has a 2xx status code
func (o *AddWebhookCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add webhook created response has a 3xx status code
func (o *AddWebhookCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add webhook created response has a 4xx status code
func (o *AddWebhookCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add webhook created response has a 5xx status code
func (o *AddWebhookCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add webhook created response a status code equal to that given
func (o *AddWebhookCreated) IsCode(code int) bool {
	return code == 201
}

func (o *AddWebhookCreated) Error() string {
	return fmt.Sprintf("[POST /webhook][%d] addWebhookCreated  %+v", 201, o.Payload)
}

func (o *AddWebhookCreated) String() string {
	return fmt.Sprintf("[POST /webhook][%d] addWebhookCreated  %+v", 201, o.Payload)
}

func (o *AddWebhookCreated) GetPayload() *models.WebhookInfo {
	return o.Payload
}

func (o *AddWebhookCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebhookInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddWebhookBadRequest creates a AddWebhookBadRequest with default headers values
func NewAddWebhookBadRequest() *AddWebhookBadRequest {
	return &AddWebhookBadRequest{}
}

/*
AddWebhookBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type AddWebhookBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this add webhook bad request response has a 2xx status code
func (o *AddWebhookBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add webhook bad request response has a 3xx status code
func (o *AddWebhookBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add webhook bad request response has a 4xx status code
func (o *AddWebhookBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add webhook bad request response has a 5xx status code
func (o *AddWebhookBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add webhook bad request response a status code equal to that given
func (o *AddWebhookBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AddWebhookBadRequest) Error() string {
	return fmt.Sprintf("[POST /webhook][%d] addWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *AddWebhookBadRequest) String() string {
	return fmt.Sprintf("[POST /webhook][%d] addWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *AddWebhookBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *AddWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
