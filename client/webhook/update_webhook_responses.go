// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-webhook-go-sdk/models"
)

// UpdateWebhookReader is a Reader for the UpdateWebhook structure.
type UpdateWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateWebhookOK creates a UpdateWebhookOK with default headers values
func NewUpdateWebhookOK() *UpdateWebhookOK {
	return &UpdateWebhookOK{}
}

/*
UpdateWebhookOK describes a response with status code 200, with default header values.

A webhook
*/
type UpdateWebhookOK struct {
	Payload *models.WebhookInfo
}

// IsSuccess returns true when this update webhook o k response has a 2xx status code
func (o *UpdateWebhookOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update webhook o k response has a 3xx status code
func (o *UpdateWebhookOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook o k response has a 4xx status code
func (o *UpdateWebhookOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update webhook o k response has a 5xx status code
func (o *UpdateWebhookOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook o k response a status code equal to that given
func (o *UpdateWebhookOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateWebhookOK) Error() string {
	return fmt.Sprintf("[PUT /webhook/{id}][%d] updateWebhookOK  %+v", 200, o.Payload)
}

func (o *UpdateWebhookOK) String() string {
	return fmt.Sprintf("[PUT /webhook/{id}][%d] updateWebhookOK  %+v", 200, o.Payload)
}

func (o *UpdateWebhookOK) GetPayload() *models.WebhookInfo {
	return o.Payload
}

func (o *UpdateWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebhookInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWebhookBadRequest creates a UpdateWebhookBadRequest with default headers values
func NewUpdateWebhookBadRequest() *UpdateWebhookBadRequest {
	return &UpdateWebhookBadRequest{}
}

/*
UpdateWebhookBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type UpdateWebhookBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this update webhook bad request response has a 2xx status code
func (o *UpdateWebhookBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update webhook bad request response has a 3xx status code
func (o *UpdateWebhookBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook bad request response has a 4xx status code
func (o *UpdateWebhookBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update webhook bad request response has a 5xx status code
func (o *UpdateWebhookBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook bad request response a status code equal to that given
func (o *UpdateWebhookBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateWebhookBadRequest) Error() string {
	return fmt.Sprintf("[PUT /webhook/{id}][%d] updateWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateWebhookBadRequest) String() string {
	return fmt.Sprintf("[PUT /webhook/{id}][%d] updateWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateWebhookBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *UpdateWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
