// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhookInfo webhook info
//
// swagger:model WebhookInfo
type WebhookInfo struct {
	WebhookPayloadForResponse

	// The date and time the webhook was created
	// Example: 2023-02-10T04:49:36.117Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The unique ID of the webhook
	// Example: d57ecc67-7a3b-4fd9-a1b4-442d4703bb8d
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The date and time the webhook was last updated
	// Example: 2023-02-10T04:49:36.117Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WebhookInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WebhookPayloadForResponse
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WebhookPayloadForResponse = aO0

	// AO1
	var dataAO1 struct {
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CreatedAt = dataAO1.CreatedAt

	m.ID = dataAO1.ID

	m.UpdatedAt = dataAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WebhookInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.WebhookPayloadForResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
	}

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.ID = m.ID

	dataAO1.UpdatedAt = m.UpdatedAt

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this webhook info
func (m *WebhookInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WebhookPayloadForResponse
	if err := m.WebhookPayloadForResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookInfo) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebhookInfo) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebhookInfo) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this webhook info based on the context it is used
func (m *WebhookInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WebhookPayloadForResponse
	if err := m.WebhookPayloadForResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WebhookInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookInfo) UnmarshalBinary(b []byte) error {
	var res WebhookInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
