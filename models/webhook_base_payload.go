// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhookBasePayload webhook base payload
//
// swagger:model WebhookBasePayload
type WebhookBasePayload struct {

	// Events that will trigger the webhook
	// Example: ["workflow-completed"]
	Events []string `json:"events"`

	// Name of the webhook
	// Example: test1
	Name string `json:"name,omitempty"`

	// scope
	Scope *WebhookBasePayloadScope `json:"scope,omitempty"`

	// URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
	// Example: https://example.com/hook
	URL string `json:"url,omitempty"`
}

// Validate validates this webhook base payload
func (m *WebhookBasePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var webhookBasePayloadEventsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["workflow-completed","job-completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webhookBasePayloadEventsItemsEnum = append(webhookBasePayloadEventsItemsEnum, v)
	}
}

func (m *WebhookBasePayload) validateEventsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webhookBasePayloadEventsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebhookBasePayload) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {

		// value enum
		if err := m.validateEventsItemsEnum("events"+"."+strconv.Itoa(i), "body", m.Events[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *WebhookBasePayload) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webhook base payload based on the context it is used
func (m *WebhookBasePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookBasePayload) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {
		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhookBasePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookBasePayload) UnmarshalBinary(b []byte) error {
	var res WebhookBasePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WebhookBasePayloadScope The scope in which the relevant events that will trigger webhooks
//
// swagger:model WebhookBasePayloadScope
type WebhookBasePayloadScope struct {

	// ID of the scope being used (at the moment, only project ID is supported)
	// Example: c124cca6-d03e-4733-b84d-32b02347b78c
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Type of the scope being used
	// Example: project
	Type *string `json:"type,omitempty"`
}

// Validate validates this webhook base payload scope
func (m *WebhookBasePayloadScope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookBasePayloadScope) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("scope"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this webhook base payload scope based on context it is used
func (m *WebhookBasePayloadScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WebhookBasePayloadScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookBasePayloadScope) UnmarshalBinary(b []byte) error {
	var res WebhookBasePayloadScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
